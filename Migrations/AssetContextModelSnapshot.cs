// <auto-generated />

using System;
using AzureMediaStreaming.Context.Assets;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AzureMediaStreaming.Migrations
{
    [DbContext(typeof(AssetContext))]
    internal class AssetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AzureMediaStreaming.Context.Models.AssetEntity", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("AssetName")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.Property<DateTime>("CreatedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETDATE()");

                b.Property<string>("FileName")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.Property<string>("InputAssetName")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.Property<string>("JobName")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.Property<string>("LocatorName")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.Property<string>("OutputAssetName")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.Property<DateTime>("UpdatedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETDATE()");

                b.HasKey("Id");

                b.HasIndex("Id")
                    .IsUnique();

                b.ToTable("AssetEntities");
            });

            modelBuilder.Entity("AzureMediaStreaming.Context.Models.AssetMetaDataEntity", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AssetEntityId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("City")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<DateTime>("CreatedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETDATE()");

                b.Property<DateTimeOffset?>("Date")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("FirstName")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("State")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<string>("Street")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<DateTimeOffset?>("Time")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTime>("UpdatedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETDATE()");

                b.Property<string>("ZipCode")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.HasKey("Id");

                b.HasIndex("AssetEntityId")
                    .IsUnique();

                b.HasIndex("Id")
                    .IsUnique();

                b.ToTable("AssetMetaDataEntities");
            });

            modelBuilder.Entity("AzureMediaStreaming.Context.Models.StreamingUrl", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasDefaultValueSql("NEWID()");

                b.Property<Guid>("AssetEntityId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETDATE()");

                b.Property<DateTime>("UpdatedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETDATE()");

                b.Property<string>("Url")
                    .HasColumnType("nvarchar(1000)")
                    .HasMaxLength(1000);

                b.HasKey("Id");

                b.HasIndex("AssetEntityId");

                b.ToTable("StreamingUrls");
            });

            modelBuilder.Entity("AzureMediaStreaming.Context.Models.AssetMetaDataEntity", b =>
            {
                b.HasOne("AzureMediaStreaming.Context.Models.AssetEntity", "AssetEntity")
                    .WithOne("AssetMetaDataEntity")
                    .HasForeignKey("AzureMediaStreaming.Context.Models.AssetMetaDataEntity", "AssetEntityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("AzureMediaStreaming.Context.Models.StreamingUrl", b =>
            {
                b.HasOne("AzureMediaStreaming.Context.Models.AssetEntity", "AssetEntity")
                    .WithMany("StreamingUrl")
                    .HasForeignKey("AssetEntityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}